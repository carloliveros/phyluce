#!/usr/bin/env python
# encoding: utf-8
"""
File: phyluce_genetrees_run_raxml_multilocus_bootstraps.py
Author: Carl Oliveros
"""

import os
import glob
import argparse
import pickle
import sys
from collections import defaultdict
from phyluce.helpers import is_dir, is_file, FullPaths, CreateDir

#import pdb


def get_args():
	"""Get arguments from CLI"""
	parser = argparse.ArgumentParser(
			description="""Re-sorts multi-locus bootstraps by loci""")
	parser.add_argument(
			"--input",
			required=True,
			type=is_dir,
			action=FullPaths,
			help="""The input directory containing multi-locus bootstraps"""
		)
	parser.add_argument(
			"--bootstrap_replicates",
			required=True,
			type=is_file,
			action=FullPaths,
			help="""The file containing bootstrap replicate sampling"""
		)
	parser.add_argument(
			"--output",
			required=True,
			action=CreateDir,
			help="""The output directory that will contain sorted bootstraps"""
		)
	return parser.parse_args()


def main():
	args = get_args()
	# read bootstrap sampling file
	with open(args.bootstrap_replicates, 'rb') as f:
		replicates = pickle.load(f)	
	all_bootreps = defaultdict(list)
	# read and sort bootstrap replicates
	print('Reading bootstrap replicates')
	for n, replicate in enumerate(replicates):
		infname = os.path.join(args.input, "boot%03d" % n)
		with open(infname, 'r') as infile:
			for i, tree in enumerate(infile):
				all_bootreps[replicate[i]].append(tree)
		infile.close()
		sys.stdout.write(".")
		sys.stdout.flush()
	# write out trees for each replicate
	print('\nWriting bootstrap replicates')
	for locus, trees in all_bootreps.iteritems():
		outfname = os.path.join(args.output, os.path.splitext(locus)[0])
		with open(outfname, 'w') as outfile:
			for tree in trees:
				outfile.write(tree)
		outfile.close()
		sys.stdout.write(".")
		sys.stdout.flush()
	print('')

if __name__ == '__main__':
	main()


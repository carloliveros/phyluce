#!/usr/bin/env python
# encoding: utf-8
"""
File: combine_quartets_QMC
Author: Carl Oliveros
Description: Convert sets of individual nexus files to a large concantenated file. Sets
defined in taxon configuration file.
"""

import os
import argparse
import ConfigParser
import subprocess

from phyluce.helpers import FullPaths, is_dir, is_file
from phyluce.log import setup_logging


def get_args():
    """Get arguments from CLI"""
    parser = argparse.ArgumentParser(
        description="""Combine sets of quartets and infer supertree using QMC""",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter
    )
    parser.add_argument(
        "--alignments",
        required=True,
        type=is_dir,
        action=FullPaths,
        help="""The directory containing directories for each subset."""
    )
    parser.add_argument(
        '--taxon-list-config',
        required=True,
        action=FullPaths,
        type=is_file,
        help='The config file containing lists of the taxa you want to include in matrices. Reference taxon starts with asterisk (*)'
    )
    parser.add_argument(
        "--translate-file",
        type=str,
        default="nj.tre",
        help="""The name of the tree file containing the translate table."""
    )
    parser.add_argument(
        "--quartet-file",
        type=str,
        default="qtt.tre",
        help="""The name of the tree file containing quartets generated by SVDquartets."""
    )
    parser.add_argument(
        "--verbosity",
        type=str,
        choices=["INFO", "WARN", "CRITICAL"],
        default="INFO",
        help="""The logging level to use."""
    )
    parser.add_argument(
        "--log-path",
        action=FullPaths,
        type=is_dir,
        default=None,
        help="""The path to a directory to hold logs."""
    )
    return parser.parse_args()

class TwoWayDict(dict):
    def __setitem__(self, key, value):
        # Remove any previous connections with these values
        if key in self:
            del self[key]
        if value in self:
            del self[value]
        dict.__setitem__(self, key, value)
        dict.__setitem__(self, value, key)

    def __delitem__(self, key):
        dict.__delitem__(self, self[key])
        dict.__delitem__(self, key)

    def __len__(self):
        """Returns the number of connections"""
        return dict.__len__(self) // 2

def get_taxon_names(args, subsets):
    taxon_names = {}
    for s in subsets:
        infile = open(os.path.join(args.alignments, s, args.translate_file), 'r')
        translate = False
        for line in infile:
            if translate:
                split_line = line.strip().rstrip(',').split()
                if len(split_line) == 2:
                    taxon_names[(s, split_line[0])] = split_line[1]
                else:
                    translate = False
            else:
                strip_line = line.strip()
                if strip_line == 'Translate':
                    translate = True
    return taxon_names

def rename_quartet_trees(args, subsets, taxon_names, global_translate):
    outfile = open(os.path.join(args.alignments, args.quartet_file), 'w')
    for s in subsets:
        infile = open(os.path.join(args.alignments, s, args.quartet_file), 'r')
        for line in infile:
            l = line.strip().split(',')
            taxon_2_3 = l[1].split('|')
            t1 = global_translate[taxon_names[(s, l[0])]]
            t2 = global_translate[taxon_names[(s, taxon_2_3[0])]]
            t3 = global_translate[taxon_names[(s, taxon_2_3[1])]]
            t4 = global_translate[taxon_names[(s, l[2])]]
            outfile.write('{},{}|{},{}\n'.format(t1, t2, t3, t4))
        infile.close()
    outfile.close()
    
def run_QMC(args):
    # run QMC
    cmd = [
        "max-cut-tree",
        "qrtt={}".format(os.path.join(args.alignments, args.quartet_file)),
        "otre={}".format(os.path.join(args.alignments, 'svdq.tre'))
    ]
    print(cmd)
    proc = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    stdout, stderr = proc.communicate()

def convert_to_nexus(args, global_translate):
    tree_file = open(os.path.join(args.alignments, 'svdq.tre'), 'r')
    translate = []
    for line in tree_file:
        nexus_file = open(os.path.join(args.alignments, 'svdq.nexus'), 'w')
        nexus_file.write('#NEXUS\nbegin trees;\ntranslate\n')
        for i in range(len(global_translate)):
            translate.append('{} {}'.format(str(i + 1), global_translate[str(i + 1)]))
        nexus_file.write(',\n'.join(translate))
        nexus_file.write("\n;\ntree 'svdq' = [&U] {}".format(line))
        nexus_file.write('\nend;')
    
def main():
    args = get_args()
    # setup logging
    log, my_name = setup_logging(args)
    # parse the config file - allowing no values (e.g. no ":" in config file)
    config = ConfigParser.RawConfigParser(allow_no_value=True)
    config.optionxform = str
    config.read(args.taxon_list_config)
    subsets = config.sections()
    
    # read translate tables from each subset
    log.info("Reading translate tables")
    taxon_names = get_taxon_names(args, subsets)

    # make 2-way dictionary of all taxa
    global_translate = TwoWayDict()
    for i, name in enumerate(set(taxon_names.values())):
        global_translate[str(i + 1)] = name

    # read and replace taxon names on quartet trees
    log.info("Renaming quartet trees")
    rename_quartet_trees(args, subsets, taxon_names, global_translate)

    # run qmc
    log.info("Running QMC")
    run_QMC(args)

    # convert QMC output to nexus
    log.info("Converting QMC output to nexus format")
    convert_to_nexus(args, global_translate)
    
    # end
    text = " Completed {} ".format(my_name)
    log.info(text.center(65, "="))

if __name__ == '__main__':
    main()

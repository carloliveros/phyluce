#!/usr/bin/env python
# encoding: utf-8
"""
File: concatenate_subsets
Author: Brant Faircloth, Carl Oliveros
Description: Convert sets of individual nexus files to a large concantenated file. Sets
defined in taxon configuration file.
"""

import os
import glob
import argparse
import ConfigParser
from Bio.Nexus import Nexus

from phyluce.helpers import FullPaths, CreateDir, is_dir, is_file, get_file_extensions
from phyluce.log import setup_logging

#import pdb

def get_args():
    """Get arguments from CLI"""
    parser = argparse.ArgumentParser(
        description="""Concatenate sets of individual nexus files""",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter
    )
    parser.add_argument(
        "--alignments",
        required=True,
        type=is_dir,
        action=FullPaths,
        help="""The directory containing alignments to concatenate (NEXUS-ONLY)."""
    )
    parser.add_argument(
        "--output",
        required=True,
        action=CreateDir,
        help="""The output file for the concatenated phylip data""",
    )
    parser.add_argument(
        '--taxon-list-config',
        required=True,
        action=FullPaths,
        type=is_file,
        help='The config file containing lists of the taxa you want to include in matrices. Reference taxon starts with asterisk (*)'
    )
    parser.add_argument(
        "--nexus",
        action="store_true",
        default=False,
        help="""Export as NEXUS format""",
    )
    parser.add_argument(
        "--charsets",
        action="store_true",
        default=False,
        help="""Add charsets to phylip file""",
    )
    parser.add_argument(
        "--verbosity",
        type=str,
        choices=["INFO", "WARN", "CRITICAL"],
        default="INFO",
        help="""The logging level to use."""
    )
    parser.add_argument(
        "--log-path",
        action=FullPaths,
        type=is_dir,
        default=None,
        help="""The path to a directory to hold logs."""
    )
    return parser.parse_args()

def get_files(input_dir):
    alignments = []
    for ftype in get_file_extensions("nexus"):
        alignments.extend(glob.glob(os.path.join(input_dir, "*{}".format(ftype))))
    return alignments
    
def main():
    args = get_args()
    # setup logging
    log, my_name = setup_logging(args)
    # parse the config file - allowing no values (e.g. no ":" in config file)
    config = ConfigParser.RawConfigParser(allow_no_value=True)
    config.optionxform = str
    config.read(args.taxon_list_config)    
    for subset in config.sections():
        # read alignments
        log.info("Reading input alignments in NEXUS format")
        nexus_files = get_files(os.path.join(args.alignments,subset))
        data = [(os.path.basename(fname), Nexus.Nexus(fname)) for fname in nexus_files]
        log.info("Concatenating files for subset {}".format(subset))
        concatenated = Nexus.combine(data)
        outdir = os.path.join(args.output, subset)
        os.makedirs(outdir)
        if not args.nexus:
            concat_file = os.path.join(outdir, os.path.basename(args.alignments) + ".phylip")
            if args.charsets:
                sets = concatenated.append_sets()
                charset_file = os.path.join(outdir, os.path.basename(args.alignments) + ".charsets")
                log.info("Writing charsets to for subset {} to {}".format(subset, charset_file))
                with open(charset_file, 'w') as outf:
                    outf.write(sets)
            log.info("Writing concatenated PHYLIP alignment for subset {} to {}".format(subset, concat_file))
            concatenated.export_phylip(concat_file)
        else:
            concat_file = os.path.join(outdir, os.path.basename(args.alignments) + ".nexus")
            if args.charsets:
                log.info("Writing concatenated NEXUS alignment for subset {} (with charsets)".format(subset))
                concatenated.write_nexus_data(concat_file)
            else:
                log.info("Writing concatenated NEXUS lignment for subset {} (without charsets)".format(subset))
                concatenated.write_nexus_data(concat_file, append_sets=False)
    # end
    text = " Completed {} ".format(my_name)
    log.info(text.center(65, "="))

if __name__ == '__main__':
    main()

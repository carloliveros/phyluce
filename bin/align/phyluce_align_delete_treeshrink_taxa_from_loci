#!/usr/bin/env python
# encoding: utf-8
"""
File: phyluce_align_delete_treeshrink_taxa_from_loci
Author: Carl Oliveros

Description: Given output of TreeShrink of taxa to delete for each locus, delete the
taxa from each locus.

"""

import os
import sys
import glob
import argparse
import multiprocessing
from Bio.Nexus import Nexus
from Bio.Seq import Seq
from phyluce.helpers import is_dir, is_file, FullPaths, CreateDir, get_file_extensions
from phyluce.log import setup_logging

def get_args():
    parser = argparse.ArgumentParser(
        description='Deletes taxa from each locus based on TreeShrink output file.')
    parser.add_argument(
        "--alignments",
        required=True,
        type=is_dir,
        action=FullPaths,
        help="The input directory containing nexus files")
    parser.add_argument(
        "--output",
        required=True,
        action=CreateDir,
        help="The directory in which to store the output files")
    parser.add_argument(
        "--treeshrink-file",
        required=True,
        type=is_file,
        action=FullPaths,
        help="The TreeShrink output with locus names and taxa to delete")
    parser.add_argument(
        "--min-taxa",
        type=int,
        default=4,
        help="Minimum number of taxa for an alignment to be retained")
    parser.add_argument(
        "--cores",
        type=int,
        default=1,
        help="The number of cores to use")
    parser.add_argument(
        "--log-path",
        action=FullPaths,
        type=is_dir,
        default=None,
        help="The path to a directory to hold logs.")
    parser.add_argument(
        "--verbosity",
        type=str,
        choices=["INFO", "WARN", "CRITICAL"],
        default="INFO",
        help="The logging level to use.")
    return parser.parse_args()

def get_files(args):
    # read treeshrink output
    ts_file = open(args.treeshrink_file, 'r')
    workload = []
    for line in ts_file:
        split_line = line.split()
        locus_fname = os.path.join(args.alignments, "{}.nexus".format(split_line[0]))
        delete_taxa = []
        if len(split_line) > 1:
            for i in range(1, len(split_line)):
                delete_taxa.append(split_line[i])
        workload.append((locus_fname, delete_taxa, args))
    return workload

def worker(work):
    f, delete_taxa, args = work     
    alignment = Nexus.Nexus(f) 
    if len(delete_taxa) > 0:     
        # delete unwanted taxa
        alignment.matrix = alignment.crop_matrix(delete=delete_taxa)
        alignment.ntax = len(alignment.matrix)
        alignment.taxlabels = alignment.matrix.keys()
        # remove sites with gap/missing data for all taxa
        gaps = alignment.gaponly(include_missing=True)
        if len(gaps) > 0:
            alignment.matrix = alignment.crop_matrix(exclude=gaps)
            alignment.nchar = len(alignment.matrix[alignment.taxlabels[0]]._data)
    fname = os.path.splitext(os.path.basename(f))[0]
    if len(alignment.taxlabels) >= args.min_taxa:
        # write out nexus
        alignment.write_nexus_data(os.path.join(args.output, fname))
        # write progress dots to stdout
        sys.stdout.write(".")
    else:
        # write progress dots to stdout
        sys.stdout.write("X")
        return fname
    sys.stdout.flush()
        
    
def main():
    args = get_args()
    log, my_name = setup_logging(args)
    log.info("Reading treeshrink file")
    work = get_files(args)
    log.info("Processing {} alignments".format(len(work)))
    if args.cores <= 1:
        results = map(worker, work)
    elif args.cores > 1:
        pool = multiprocessing.Pool(args.cores)
        results = pool.map(worker, work)
    print("")
    dropped_loci = [locus for locus in results if locus is not None]
    log.info("The following loci were dropped for having too few taxa: {}".format(', '.join(dropped_loci)))
    text = " Completed {} ".format(my_name)
    log.info(text.center(65, "="))

if __name__ == '__main__':
    main()
